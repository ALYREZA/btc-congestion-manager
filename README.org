* bitcoin fee estimator
  :PROPERTIES:
  :CREATED:  [2017-11-21 Tue 17:45]
  :MODIFIED: [2017-11-22 Wed 02:41]
  :END:
** requirements
  - bitcoind full node with zmq push notifications enabled for blockhash

**  problem
   - given the transactions present in the mempool, find the feeRate that would
     be placed at the end of a chosen block

** diagram (2018-01-01 16:48:56)
   #+BEGIN_SRC 

       0 sat/B  -143 sat/B  -159 sat/B   -18 sat/B
         |-----------|-----------|-----------|
         |           |           |           |
     371 sat/B   228 sat/B    68 sat/B   50 sat/B
         |           |           |           |
         v           v           v           v
 |---------|-----------|-----------|-----------|
0MB       1MB         2MB         3MB         4MB
   block1      block2      block3      block4

   #+END_SRC

** methods
   - we rewrite x = x_0 + vt into x_0 = x - vt (eq1), where x_0 is the initial position
     [B], x is the finalPosition [B], v is velocity in [B/10 min] and t is time
     in [10 min]
   - all txs are sorted according to weight of the whole branch involving all
     its decendents
   - we calculate how many transactions are added ahead of a target block to
     estimate average velocity (estimate comes from the past 1/2 hour -- set
     that in config.ts)
   - we assume probability of finding a new block at any time is constant.
   - we use the sorted list of txs to determine x. knowing x and vt we can
     calculate x_0 (using eq1) -- x_0 is a position in B
   - we look up the feeRate paid by that tx closest to where x_0 falls and use
     that feeRate * 0.999 (avoid spurious minimum)
   - best deal calculation (to be improved -- PR welcome): take the derivative
     of feeRate targetting different blocks, and call it diffFeeRate. cost
     function is: diffFeeRate / sqrt(targetBlock). and best deal is the head of
     that sorted list
